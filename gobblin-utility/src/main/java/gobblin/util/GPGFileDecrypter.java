package gobblin.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.NoSuchProviderException;
import java.security.Security;

import org.apache.commons.io.IOUtils;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openpgp.PGPCompressedData;
import org.bouncycastle.openpgp.PGPEncryptedDataList;
import org.bouncycastle.openpgp.PGPException;
import org.bouncycastle.openpgp.PGPLiteralData;
import org.bouncycastle.openpgp.PGPPBEEncryptedData;
import org.bouncycastle.openpgp.PGPUtil;
import org.bouncycastle.openpgp.jcajce.JcaPGPObjectFactory;
import org.bouncycastle.openpgp.operator.jcajce.JcaPGPDigestCalculatorProviderBuilder;
import org.bouncycastle.openpgp.operator.jcajce.JcePBEDataDecryptorFactoryBuilder;


/**
 * A utility class that decrypts password based
 * encryption files.
 */
public class GPGFileDecrypter {

  public static InputStream decryptFile(InputStream in, String passPhrase) throws IOException, NoSuchProviderException,
      PGPException {

    if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null) {
      Security.addProvider(new BouncyCastleProvider());
    }
    in = PGPUtil.getDecoderStream(in);

    JcaPGPObjectFactory pgpF = new JcaPGPObjectFactory(in);
    PGPEncryptedDataList enc;
    Object o = pgpF.nextObject();

    //
    // the first object might be a PGP marker packet.
    //
    if (o instanceof PGPEncryptedDataList) {
      enc = (PGPEncryptedDataList) o;
    } else {
      enc = (PGPEncryptedDataList) pgpF.nextObject();
    }

    PGPPBEEncryptedData pbe = (PGPPBEEncryptedData) enc.get(0);

    InputStream clear =
        pbe.getDataStream(new JcePBEDataDecryptorFactoryBuilder(new JcaPGPDigestCalculatorProviderBuilder()
            .setProvider("BC").build()).setProvider("BC").build(passPhrase.toCharArray()));

    JcaPGPObjectFactory pgpFact = new JcaPGPObjectFactory(clear);

    //
    // if we're trying to read a file generated by someone other than us
    // the data might not be compressed, so we check the return type from
    // the factory and behave accordingly.
    //
    o = pgpFact.nextObject();
    if (o instanceof PGPCompressedData) {
      PGPCompressedData cData = (PGPCompressedData) o;

      pgpFact = new JcaPGPObjectFactory(cData.getDataStream());

      o = pgpFact.nextObject();
    }

    PGPLiteralData ld = (PGPLiteralData) o;
    return ld.getInputStream();

  }

  public static void main(String[] args) throws Exception {

    String filePath = "/tmp/lynda/LogData20151016080002.tar.gz.gpg";
    String outFilePath = "/tmp/lynda/LogData20151016080002-done.tar.gz";
    String passPhrase = "X9k2Qktny9bACfvCrNpvqgEqMLo82cbX";

    InputStream in = new FileInputStream(new File(filePath));
    InputStream dIn = decryptFile(in, passPhrase);

    OutputStream os = new FileOutputStream(outFilePath);
    IOUtils.copy(dIn, os);
    in.close();
    dIn.close();
    os.close();

  }
}
