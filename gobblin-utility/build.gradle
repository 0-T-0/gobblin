// Copyright (C) 2014-2015 LinkedIn Corp. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use
// this file except in compliance with the License. You may obtain a copy of the
// License at  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied.

apply plugin: 'java'

dependencies {
  compile project(":gobblin-api")

compile externalDependency.commonsCli
  compile externalDependency.commonsConfiguration
  compile externalDependency.commonsEmail
  compile externalDependency.commonsIO
  compile externalDependency.commonsLang
  compile externalDependency.guava
  compile externalDependency.slf4j
  compile externalDependency.avro
  compile externalDependency.jodaTime
  compile externalDependency.jacksonCore
  compile externalDependency.jasypt
  if (project.hasProperty('useHadoop2')) {
    compile externalDependency.avroMapredH2
    runtime externalDependency.hadoopCommon
    runtime externalDependency.hadoopClientCore
    runtime externalDependency.hadoopHdfs
    runtime externalDependency.hadoopAuth
  } else {
    compile externalDependency.avroMapredH1
    runtime externalDependency.hadoop
  }

  testCompile externalDependency.testng
  testCompile externalDependency.mockito
}

configurations {
    compile {
        transitive = true
    }
}

test {
    useTestNG () {
        excludeGroups 'ignore'
    }
    workingDir rootProject.rootDir
}

classification="library"

jar {
  archiveName = "gobblin-cli-password-encryptor.jar"
  def manifestClasspath = configurations.runtime.collect { "gobblin-cli-password-encryptor_lib/" + it.getName() }.join(' ')
  manifestClasspath = ". " + manifestClasspath
  manifest {
    attributes("Manifest-Version"       : "1.0",
    "Main-Class"             : "gobblin.util.CLIPasswordEncryptor",
    "Class-Path"             : manifestClasspath
    )
  }
}

task createCompactionTar(type: Tar) {
  extension = 'tar.gz'
  baseName = project.name
  compression = Compression.GZIP

  into("gobblin-cli-password-encryptor_lib") { from configurations.runtime }
  into(".") { from project.rootDir.path + "/build/gobblin-utility/libs/gobblin-cli-password-encryptor.jar" }
  into(".") { from project.rootDir.path + "/conf/log4j.xml" }
}

createCompactionTar.dependsOn ':gobblin-utility:jar'

artifacts {
  archives createCompactionTar
}
